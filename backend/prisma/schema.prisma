generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  FLIGHT
  HOTEL
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MPESA
  CREDIT_CARD
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String
  dateOfBirth   DateTime
  nationality   String
  reservations  FlightReservation[]
  bookings      HotelBooking[]
  payments      Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Flight {
  id            String    @id @default(uuid())
  flightNumber  String    @unique
  from          String
  to            String
  departureTime DateTime
  arrivalTime   DateTime
  availableSeats Int
  price         Float
  reservations  FlightReservation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FlightReservation {
  id            String    @id @default(uuid())
  userId        String
  flightId      String
  seatNumber    String
  status        String    // PENDING, CONFIRMED, CANCELLED
  paymentStatus String?   @default("PENDING") // PENDING, PAID, REFUNDED
  user          User      @relation(fields: [userId], references: [id])
  flight        Flight    @relation(fields: [flightId], references: [id])
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  paymentId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([flightId, seatNumber])
  @@index([paymentId])
}

model Hotel {
  id          String    @id @default(uuid())
  name        String
  location    String
  rooms       HotelRoom[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model HotelRoom {
  id          String    @id @default(uuid())
  hotelId     String
  roomNumber  String
  type        String
  price       Float
  available   Boolean   @default(true)
  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  bookings    HotelBooking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([hotelId, roomNumber])
}

model HotelBooking {
  id            String    @id @default(uuid())
  userId        String
  roomId        String
  checkIn       DateTime
  checkOut      DateTime
  status        String    // PENDING, CONFIRMED, CANCELLED
  paymentStatus String?   @default("PENDING") // PENDING, PAID, REFUNDED
  user          User      @relation(fields: [userId], references: [id])
  room          HotelRoom @relation(fields: [roomId], references: [id])
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  paymentId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([paymentId])
}

model Payment {
  id              String          @id @default(cuid())
  transactionId   String          @unique
  amount          Float
  currency        String
  status          PaymentStatus   @default(PENDING)
  type            PaymentType
  provider        PaymentProvider
  referenceId     String          // References either FlightReservation or HotelBooking
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  flightBookings  FlightReservation[]
  hotelBookings   HotelBooking[]
  metadata        Json?           // Stores provider-specific details
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  completedAt     DateTime?
  refundedAt      DateTime?
  refundId        String?
  refundReason    String?

  @@index([userId])
  @@index([transactionId])
  @@index([referenceId])
  @@index([status])
}